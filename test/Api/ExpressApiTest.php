<?php
/**
 * ExpressApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ExpressApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ExpressApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addHiddenOffers_3
     *
     * Скрытие товаров и настройки скрытия.
     *
     */
    public function testAddHiddenOffers3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addOffersToArchive_3
     *
     * Добавление товаров в архив.
     *
     */
    public function testAddOffersToArchive3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateTariffs_3
     *
     * Калькулятор стоимости услуг.
     *
     */
    public function testCalculateTariffs3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for confirmBusinessPrices_3
     *
     * Удаление товара из карантина по цене в кабинете.
     *
     */
    public function testConfirmBusinessPrices3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for confirmCampaignPrices_3
     *
     * Удаление товара из карантина по цене в магазине.
     *
     */
    public function testConfirmCampaignPrices3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createChat_3
     *
     * Создание нового чата с покупателем.
     *
     */
    public function testCreateChat3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteCampaignOffers_3
     *
     * Удаление товаров из ассортимента магазина.
     *
     */
    public function testDeleteCampaignOffers3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteGoodsFeedbackComment_3
     *
     * Удаление комментария к отзыву.
     *
     */
    public function testDeleteGoodsFeedbackComment3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteHiddenOffers_3
     *
     * Возобновление показа товаров.
     *
     */
    public function testDeleteHiddenOffers3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOffersFromArchive_3
     *
     * Удаление товаров из архива.
     *
     */
    public function testDeleteOffersFromArchive3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOffers_3
     *
     * Удаление товаров из каталога.
     *
     */
    public function testDeleteOffers3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deletePromoOffers_3
     *
     * Удаление товаров из акции.
     *
     */
    public function testDeletePromoOffers3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateBoostConsolidatedReport_3
     *
     * Отчет по бусту продаж.
     *
     */
    public function testGenerateBoostConsolidatedReport3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateCompetitorsPositionReport_3
     *
     * Отчет «Конкурентная позиция».
     *
     */
    public function testGenerateCompetitorsPositionReport3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateGoodsFeedbackReport_3
     *
     * Отчет по отзывам о товарах.
     *
     */
    public function testGenerateGoodsFeedbackReport3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateGoodsRealizationReport_2
     *
     * Отчет по реализации.
     *
     */
    public function testGenerateGoodsRealizationReport2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateMassOrderLabelsReport_2
     *
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах.
     *
     */
    public function testGenerateMassOrderLabelsReport2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateOrderLabel_2
     *
     * Готовый ярлык‑наклейка для коробки в заказе.
     *
     */
    public function testGenerateOrderLabel2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateOrderLabels_2
     *
     * Готовые ярлыки‑наклейки на все коробки в одном заказе.
     *
     */
    public function testGenerateOrderLabels2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generatePricesReport_3
     *
     * Отчет «Цены на рынке».
     *
     */
    public function testGeneratePricesReport3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateShelfsStatisticsReport_3
     *
     * Отчет по полкам.
     *
     */
    public function testGenerateShelfsStatisticsReport3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateShowsSalesReport_3
     *
     * Отчет «Аналитика продаж».
     *
     */
    public function testGenerateShowsSalesReport3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateStocksOnWarehousesReport_3
     *
     * Отчет по остаткам на складах.
     *
     */
    public function testGenerateStocksOnWarehousesReport3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateUnitedMarketplaceServicesReport_3
     *
     * Отчет по стоимости услуг.
     *
     */
    public function testGenerateUnitedMarketplaceServicesReport3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateUnitedNettingReport_3
     *
     * Отчет по платежам.
     *
     */
    public function testGenerateUnitedNettingReport3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateUnitedOrdersReport_3
     *
     * Отчет по заказам.
     *
     */
    public function testGenerateUnitedOrdersReport3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllOffers_2
     *
     * Все предложения магазина.
     *
     */
    public function testGetAllOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBidsInfoForBusiness_3
     *
     * Информация об установленных ставках.
     *
     */
    public function testGetBidsInfoForBusiness3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBidsRecommendations_3
     *
     * Рекомендованные ставки для заданных товаров.
     *
     */
    public function testGetBidsRecommendations3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBusinessQuarantineOffers_3
     *
     * Список товаров, находящихся в карантине по цене в кабинете.
     *
     */
    public function testGetBusinessQuarantineOffers3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBusinessSettings_3
     *
     * Настройки кабинета.
     *
     */
    public function testGetBusinessSettings3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignLogins_1
     *
     * Логины, связанные с магазином.
     *
     */
    public function testGetCampaignLogins1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignOffers_3
     *
     * Информация о товарах, которые размещены в заданном магазине.
     *
     */
    public function testGetCampaignOffers3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignQuarantineOffers_3
     *
     * Список товаров, находящихся в карантине по цене в магазине.
     *
     */
    public function testGetCampaignQuarantineOffers3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignRegion_3
     *
     * Регион магазина.
     *
     */
    public function testGetCampaignRegion3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignSettings_2
     *
     * Настройки магазина.
     *
     */
    public function testGetCampaignSettings2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaign_1
     *
     * Информация о магазине.
     *
     */
    public function testGetCampaign1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignsByLogin_1
     *
     * Магазины, доступные логину.
     *
     */
    public function testGetCampaignsByLogin1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaigns_1
     *
     * Список магазинов пользователя.
     *
     */
    public function testGetCampaigns1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoriesMaxSaleQuantum_3
     *
     * Лимит на установку кванта продажи и минимального количества товаров в заказе.
     *
     */
    public function testGetCategoriesMaxSaleQuantum3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoriesTree_3
     *
     * Дерево категорий.
     *
     */
    public function testGetCategoriesTree3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoryContentParameters_3
     *
     * Списки характеристик товаров по категориям.
     *
     */
    public function testGetCategoryContentParameters3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getChatHistory_3
     *
     * Получение истории сообщений в чате.
     *
     */
    public function testGetChatHistory3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getChats_3
     *
     * Получение доступных чатов.
     *
     */
    public function testGetChats3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeliveryServices_2
     *
     * Справочник служб доставки.
     *
     */
    public function testGetDeliveryServices2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFeedIndexLogs_2
     *
     * Отчет по индексации прайс-листа.
     *
     */
    public function testGetFeedIndexLogs2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFeed_2
     *
     * Информация о прайс-листе.
     *
     */
    public function testGetFeed2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFeedbackAndCommentUpdates_3
     *
     * Новые и обновленные отзывы о магазине.
     *
     */
    public function testGetFeedbackAndCommentUpdates3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFeeds_2
     *
     * Список прайс-листов магазина.
     *
     */
    public function testGetFeeds2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getGoodsFeedbackComments_3
     *
     * Получение комментариев к отзыву.
     *
     */
    public function testGetGoodsFeedbackComments3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getGoodsFeedbacks_3
     *
     * Получение отзывов о товарах продавца.
     *
     */
    public function testGetGoodsFeedbacks3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getGoodsStats_2
     *
     * Отчет по товарам.
     *
     */
    public function testGetGoodsStats2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getHiddenOffers_3
     *
     * Информация о скрытых вами товарах.
     *
     */
    public function testGetHiddenOffers3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferCardsContentStatus_3
     *
     * Получение информации о заполненности карточек магазина.
     *
     */
    public function testGetOfferCardsContentStatus3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferMappingEntries_2
     *
     * Список товаров в каталоге.
     *
     */
    public function testGetOfferMappingEntries2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferMappings_3
     *
     * Информация о товарах в каталоге.
     *
     */
    public function testGetOfferMappings3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferRecommendations_3
     *
     * Рекомендации Маркета, касающиеся цен.
     *
     */
    public function testGetOfferRecommendations3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOffers_2
     *
     * Предложения магазина.
     *
     */
    public function testGetOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrderBusinessBuyerInfo_3
     *
     * Информация о покупателе — юридическом лице.
     *
     */
    public function testGetOrderBusinessBuyerInfo3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrderBusinessDocumentsInfo_3
     *
     * Информация о документах.
     *
     */
    public function testGetOrderBusinessDocumentsInfo3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrderLabelsData_2
     *
     * Данные для самостоятельного изготовления ярлыков.
     *
     */
    public function testGetOrderLabelsData2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrder_3
     *
     * Информация об одном заказе.
     *
     */
    public function testGetOrder3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrdersStats_3
     *
     * Детальная информация по заказам.
     *
     */
    public function testGetOrdersStats3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrders_3
     *
     * Информация о нескольких заказах.
     *
     */
    public function testGetOrders3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPricesByOfferIds_3
     *
     * Просмотр цен на указанные товары в магазине.
     *
     */
    public function testGetPricesByOfferIds3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPrices_3
     *
     * Список цен.
     *
     */
    public function testGetPrices3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPromoOffers_3
     *
     * Получение списка товаров, которые участвуют или могут участвовать в акции.
     *
     */
    public function testGetPromoOffers3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPromos_3
     *
     * Получение списка акций.
     *
     */
    public function testGetPromos3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getQualityRatingDetails_2
     *
     * Заказы, которые повлияли на индекс качества.
     *
     */
    public function testGetQualityRatingDetails2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getQualityRatings_3
     *
     * Индекс качества магазинов.
     *
     */
    public function testGetQualityRatings3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReportInfo_3
     *
     * Получение заданного отчета.
     *
     */
    public function testGetReportInfo3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturnApplication_2
     *
     * Получение заявления на возврат.
     *
     */
    public function testGetReturnApplication2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturnPhoto_2
     *
     * Получение фотографии возврата.
     *
     */
    public function testGetReturnPhoto2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturn_2
     *
     * Информация о невыкупе или возврате.
     *
     */
    public function testGetReturn2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturns_2
     *
     * Список невыкупов и возвратов.
     *
     */
    public function testGetReturns2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getStocks_3
     *
     * Информация об остатках и оборачиваемости.
     *
     */
    public function testGetStocks3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSuggestedOfferMappingEntries_2
     *
     * Рекомендованные карточки для товаров.
     *
     */
    public function testGetSuggestedOfferMappingEntries2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSuggestedOfferMappings_3
     *
     * Просмотр карточек на Маркете, которые подходят вашим товарам.
     *
     */
    public function testGetSuggestedOfferMappings3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSuggestedPrices_2
     *
     * Цены для продвижения товаров.
     *
     */
    public function testGetSuggestedPrices2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWarehouses_2
     *
     * Список складов и групп складов.
     *
     */
    public function testGetWarehouses2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for provideOrderItemIdentifiers_2
     *
     * Передача кодов маркировки единиц товара.
     *
     */
    public function testProvideOrderItemIdentifiers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putBidsForBusiness_3
     *
     * Включение буста продаж и установка ставок.
     *
     */
    public function testPutBidsForBusiness3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putBidsForCampaign_2
     *
     * Включение буста продаж и установка ставок для магазина.
     *
     */
    public function testPutBidsForCampaign2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for refreshFeed_2
     *
     * Сообщить, что прайс-лист обновился.
     *
     */
    public function testRefreshFeed2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRegionChildren_3
     *
     * Информация о дочерних регионах.
     *
     */
    public function testSearchRegionChildren3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRegionsById_3
     *
     * Информация о регионе.
     *
     */
    public function testSearchRegionsById3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRegionsByName_3
     *
     * Поиск регионов по их имени.
     *
     */
    public function testSearchRegionsByName3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendFileToChat_3
     *
     * Отправка файла в чат.
     *
     */
    public function testSendFileToChat3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendMessageToChat_3
     *
     * Отправка сообщения в чат.
     *
     */
    public function testSendMessageToChat3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setFeedParams_2
     *
     * Изменение параметров прайс-листа.
     *
     */
    public function testSetFeedParams2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setOrderBoxLayout_1
     *
     * Подготовка заказа.
     *
     */
    public function testSetOrderBoxLayout1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setOrderShipmentBoxes_2
     *
     * Передача количества грузовых мест в заказе.
     *
     */
    public function testSetOrderShipmentBoxes2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for skipGoodsFeedbacksReaction_3
     *
     * Отказ от ответа на отзывы.
     *
     */
    public function testSkipGoodsFeedbacksReaction3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateBusinessPrices_3
     *
     * Установка цен на товары во всех магазинах.
     *
     */
    public function testUpdateBusinessPrices3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateCampaignOffers_3
     *
     * Изменение условий продажи товаров в магазине.
     *
     */
    public function testUpdateCampaignOffers3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateGoodsFeedbackComment_3
     *
     * Добавление нового или изменение созданного комментария.
     *
     */
    public function testUpdateGoodsFeedbackComment3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOfferContent_3
     *
     * Редактирование категорийных характеристик товара.
     *
     */
    public function testUpdateOfferContent3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOfferMappingEntries_2
     *
     * Добавление и редактирование товаров в каталоге.
     *
     */
    public function testUpdateOfferMappingEntries2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOfferMappings_3
     *
     * Добавление товаров в каталог и изменение информации о них.
     *
     */
    public function testUpdateOfferMappings3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrderItems_2
     *
     * Удаление товара из заказа или уменьшение числа единиц.
     *
     */
    public function testUpdateOrderItems2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrderStatus_2
     *
     * Изменение статуса одного заказа.
     *
     */
    public function testUpdateOrderStatus2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrderStatuses_2
     *
     * Изменение статусов нескольких заказов.
     *
     */
    public function testUpdateOrderStatuses2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePrices_3
     *
     * Установка цен на товары в конкретном магазине.
     *
     */
    public function testUpdatePrices3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePromoOffers_3
     *
     * Добавление товаров в акцию или изменение их цен.
     *
     */
    public function testUpdatePromoOffers3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateStocks_2
     *
     * Передача информации об остатках.
     *
     */
    public function testUpdateStocks2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for verifyOrderEac_0
     *
     * Передача кода подтверждения.
     *
     */
    public function testVerifyOrderEac0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}

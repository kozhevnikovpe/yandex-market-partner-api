<?php
/**
 * FbsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * FbsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FbsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addHiddenOffers_1
     *
     * Скрытие товаров и настройки скрытия.
     *
     */
    public function testAddHiddenOffers1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addOffersToArchive_2
     *
     * Добавление товаров в архив.
     *
     */
    public function testAddOffersToArchive2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateTariffs_0
     *
     * Калькулятор стоимости услуг.
     *
     */
    public function testCalculateTariffs0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for confirmBusinessPrices_2
     *
     * Удаление товара из карантина по цене в кабинете.
     *
     */
    public function testConfirmBusinessPrices2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for confirmCampaignPrices_2
     *
     * Удаление товара из карантина по цене в магазине.
     *
     */
    public function testConfirmCampaignPrices2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for confirmShipment_0
     *
     * Подтверждение отгрузки.
     *
     */
    public function testConfirmShipment0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createChat_1
     *
     * Создание нового чата с покупателем.
     *
     */
    public function testCreateChat1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteCampaignOffers_2
     *
     * Удаление товаров из ассортимента магазина.
     *
     */
    public function testDeleteCampaignOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteGoodsFeedbackComment_1
     *
     * Удаление комментария к отзыву.
     *
     */
    public function testDeleteGoodsFeedbackComment1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteHiddenOffers_1
     *
     * Возобновление показа товаров.
     *
     */
    public function testDeleteHiddenOffers1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOffersFromArchive_2
     *
     * Удаление товаров из архива.
     *
     */
    public function testDeleteOffersFromArchive2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOffers_2
     *
     * Удаление товаров из каталога.
     *
     */
    public function testDeleteOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deletePromoOffers_1
     *
     * Удаление товаров из акции.
     *
     */
    public function testDeletePromoOffers1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadShipmentAct_0
     *
     * Получение акта приема-передачи.
     *
     */
    public function testDownloadShipmentAct0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadShipmentDiscrepancyAct_0
     *
     * Получение акта расхождений.
     *
     */
    public function testDownloadShipmentDiscrepancyAct0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadShipmentInboundAct_0
     *
     * Получение фактического акта приема-передачи.
     *
     */
    public function testDownloadShipmentInboundAct0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadShipmentPalletLabels_0
     *
     * Ярлыки для доверительной приемки (FBS).
     *
     */
    public function testDownloadShipmentPalletLabels0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadShipmentReceptionTransferAct_0
     *
     * Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее.
     *
     */
    public function testDownloadShipmentReceptionTransferAct0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for downloadShipmentTransportationWaybill_0
     *
     * Получение транспортной накладной.
     *
     */
    public function testDownloadShipmentTransportationWaybill0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateBoostConsolidatedReport_1
     *
     * Отчет по бусту продаж.
     *
     */
    public function testGenerateBoostConsolidatedReport1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateCompetitorsPositionReport_2
     *
     * Отчет «Конкурентная позиция».
     *
     */
    public function testGenerateCompetitorsPositionReport2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateGoodsFeedbackReport_1
     *
     * Отчет по отзывам о товарах.
     *
     */
    public function testGenerateGoodsFeedbackReport1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateGoodsRealizationReport_1
     *
     * Отчет по реализации.
     *
     */
    public function testGenerateGoodsRealizationReport1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateMassOrderLabelsReport_0
     *
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах.
     *
     */
    public function testGenerateMassOrderLabelsReport0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateOrderLabel_0
     *
     * Готовый ярлык‑наклейка для коробки в заказе.
     *
     */
    public function testGenerateOrderLabel0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateOrderLabels_0
     *
     * Готовые ярлыки‑наклейки на все коробки в одном заказе.
     *
     */
    public function testGenerateOrderLabels0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generatePricesReport_1
     *
     * Отчет «Цены на рынке».
     *
     */
    public function testGeneratePricesReport1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateShelfsStatisticsReport_1
     *
     * Отчет по полкам.
     *
     */
    public function testGenerateShelfsStatisticsReport1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateShipmentListDocumentReport_0
     *
     * Получение листа сборки.
     *
     */
    public function testGenerateShipmentListDocumentReport0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateShowsSalesReport_2
     *
     * Отчет «Аналитика продаж».
     *
     */
    public function testGenerateShowsSalesReport2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateStocksOnWarehousesReport_1
     *
     * Отчет по остаткам на складах.
     *
     */
    public function testGenerateStocksOnWarehousesReport1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateUnitedMarketplaceServicesReport_2
     *
     * Отчет по стоимости услуг.
     *
     */
    public function testGenerateUnitedMarketplaceServicesReport2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateUnitedNettingReport_2
     *
     * Отчет по платежам.
     *
     */
    public function testGenerateUnitedNettingReport2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateUnitedOrdersReport_1
     *
     * Отчет по заказам.
     *
     */
    public function testGenerateUnitedOrdersReport1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllOffers_1
     *
     * Все предложения магазина.
     *
     */
    public function testGetAllOffers1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBidsInfoForBusiness_1
     *
     * Информация об установленных ставках.
     *
     */
    public function testGetBidsInfoForBusiness1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBidsRecommendations_1
     *
     * Рекомендованные ставки для заданных товаров.
     *
     */
    public function testGetBidsRecommendations1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBusinessQuarantineOffers_2
     *
     * Список товаров, находящихся в карантине по цене в кабинете.
     *
     */
    public function testGetBusinessQuarantineOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBusinessSettings_1
     *
     * Настройки кабинета.
     *
     */
    public function testGetBusinessSettings1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignLogins_2
     *
     * Логины, связанные с магазином.
     *
     */
    public function testGetCampaignLogins2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignOffers_2
     *
     * Информация о товарах, которые размещены в заданном магазине.
     *
     */
    public function testGetCampaignOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignQuarantineOffers_2
     *
     * Список товаров, находящихся в карантине по цене в магазине.
     *
     */
    public function testGetCampaignQuarantineOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignRegion_2
     *
     * Регион магазина.
     *
     */
    public function testGetCampaignRegion2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignSettings_1
     *
     * Настройки магазина.
     *
     */
    public function testGetCampaignSettings1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaign_2
     *
     * Информация о магазине.
     *
     */
    public function testGetCampaign2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignsByLogin_2
     *
     * Магазины, доступные логину.
     *
     */
    public function testGetCampaignsByLogin2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaigns_2
     *
     * Список магазинов пользователя.
     *
     */
    public function testGetCampaigns2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoriesMaxSaleQuantum_1
     *
     * Лимит на установку кванта продажи и минимального количества товаров в заказе.
     *
     */
    public function testGetCategoriesMaxSaleQuantum1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoriesTree_1
     *
     * Дерево категорий.
     *
     */
    public function testGetCategoriesTree1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoryContentParameters_2
     *
     * Списки характеристик товаров по категориям.
     *
     */
    public function testGetCategoryContentParameters2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getChatHistory_1
     *
     * Получение истории сообщений в чате.
     *
     */
    public function testGetChatHistory1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getChats_1
     *
     * Получение доступных чатов.
     *
     */
    public function testGetChats1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeliveryServices_0
     *
     * Справочник служб доставки.
     *
     */
    public function testGetDeliveryServices0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFeedIndexLogs_1
     *
     * Отчет по индексации прайс-листа.
     *
     */
    public function testGetFeedIndexLogs1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFeed_1
     *
     * Информация о прайс-листе.
     *
     */
    public function testGetFeed1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFeedbackAndCommentUpdates_2
     *
     * Новые и обновленные отзывы о магазине.
     *
     */
    public function testGetFeedbackAndCommentUpdates2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFeeds_1
     *
     * Список прайс-листов магазина.
     *
     */
    public function testGetFeeds1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getGoodsFeedbackComments_1
     *
     * Получение комментариев к отзыву.
     *
     */
    public function testGetGoodsFeedbackComments1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getGoodsFeedbacks_1
     *
     * Получение отзывов о товарах продавца.
     *
     */
    public function testGetGoodsFeedbacks1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getGoodsStats_1
     *
     * Отчет по товарам.
     *
     */
    public function testGetGoodsStats1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getHiddenOffers_1
     *
     * Информация о скрытых вами товарах.
     *
     */
    public function testGetHiddenOffers1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferCardsContentStatus_2
     *
     * Получение информации о заполненности карточек магазина.
     *
     */
    public function testGetOfferCardsContentStatus2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferMappingEntries_1
     *
     * Список товаров в каталоге.
     *
     */
    public function testGetOfferMappingEntries1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferMappings_2
     *
     * Информация о товарах в каталоге.
     *
     */
    public function testGetOfferMappings2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferRecommendations_2
     *
     * Рекомендации Маркета, касающиеся цен.
     *
     */
    public function testGetOfferRecommendations2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOffers_1
     *
     * Предложения магазина.
     *
     */
    public function testGetOffers1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrderBusinessBuyerInfo_0
     *
     * Информация о покупателе — юридическом лице.
     *
     */
    public function testGetOrderBusinessBuyerInfo0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrderBusinessDocumentsInfo_0
     *
     * Информация о документах.
     *
     */
    public function testGetOrderBusinessDocumentsInfo0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrderLabelsData_0
     *
     * Данные для самостоятельного изготовления ярлыков.
     *
     */
    public function testGetOrderLabelsData0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrder_1
     *
     * Информация об одном заказе.
     *
     */
    public function testGetOrder1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrdersStats_1
     *
     * Детальная информация по заказам.
     *
     */
    public function testGetOrdersStats1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrders_0
     *
     * Информация о нескольких заказах.
     *
     */
    public function testGetOrders0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPricesByOfferIds_1
     *
     * Просмотр цен на указанные товары в магазине.
     *
     */
    public function testGetPricesByOfferIds1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPrices_1
     *
     * Список цен.
     *
     */
    public function testGetPrices1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPromoOffers_1
     *
     * Получение списка товаров, которые участвуют или могут участвовать в акции.
     *
     */
    public function testGetPromoOffers1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPromos_1
     *
     * Получение списка акций.
     *
     */
    public function testGetPromos1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getQualityRatingDetails_0
     *
     * Заказы, которые повлияли на индекс качества.
     *
     */
    public function testGetQualityRatingDetails0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getQualityRatings_1
     *
     * Индекс качества магазинов.
     *
     */
    public function testGetQualityRatings1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReportInfo_2
     *
     * Получение заданного отчета.
     *
     */
    public function testGetReportInfo2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturnApplication_0
     *
     * Получение заявления на возврат.
     *
     */
    public function testGetReturnApplication0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturnPhoto_0
     *
     * Получение фотографии возврата.
     *
     */
    public function testGetReturnPhoto0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturn_0
     *
     * Информация о невыкупе или возврате.
     *
     */
    public function testGetReturn0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturns_0
     *
     * Список невыкупов и возвратов.
     *
     */
    public function testGetReturns0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getShipmentOrdersInfo_0
     *
     * Получение информации о возможности печати ярлыков (FBS).
     *
     */
    public function testGetShipmentOrdersInfo0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getShipment_0
     *
     * Получение информации об одной отгрузке.
     *
     */
    public function testGetShipment0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getStocks_1
     *
     * Информация об остатках и оборачиваемости.
     *
     */
    public function testGetStocks1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSuggestedOfferMappingEntries_1
     *
     * Рекомендованные карточки для товаров.
     *
     */
    public function testGetSuggestedOfferMappingEntries1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSuggestedOfferMappings_2
     *
     * Просмотр карточек на Маркете, которые подходят вашим товарам.
     *
     */
    public function testGetSuggestedOfferMappings2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSuggestedPrices_1
     *
     * Цены для продвижения товаров.
     *
     */
    public function testGetSuggestedPrices1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWarehouses_0
     *
     * Список складов и групп складов.
     *
     */
    public function testGetWarehouses0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for provideOrderItemIdentifiers_0
     *
     * Передача кодов маркировки единиц товара.
     *
     */
    public function testProvideOrderItemIdentifiers0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putBidsForBusiness_1
     *
     * Включение буста продаж и установка ставок.
     *
     */
    public function testPutBidsForBusiness1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putBidsForCampaign_1
     *
     * Включение буста продаж и установка ставок для магазина.
     *
     */
    public function testPutBidsForCampaign1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for refreshFeed_1
     *
     * Сообщить, что прайс-лист обновился.
     *
     */
    public function testRefreshFeed1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRegionChildren_1
     *
     * Информация о дочерних регионах.
     *
     */
    public function testSearchRegionChildren1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRegionsById_1
     *
     * Информация о регионе.
     *
     */
    public function testSearchRegionsById1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRegionsByName_1
     *
     * Поиск регионов по их имени.
     *
     */
    public function testSearchRegionsByName1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchShipments_0
     *
     * Получение информации о нескольких отгрузках.
     *
     */
    public function testSearchShipments0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendFileToChat_1
     *
     * Отправка файла в чат.
     *
     */
    public function testSendFileToChat1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendMessageToChat_1
     *
     * Отправка сообщения в чат.
     *
     */
    public function testSendMessageToChat1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setFeedParams_1
     *
     * Изменение параметров прайс-листа.
     *
     */
    public function testSetFeedParams1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setOrderBoxLayout_0
     *
     * Подготовка заказа.
     *
     */
    public function testSetOrderBoxLayout0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setOrderShipmentBoxes_0
     *
     * Передача количества грузовых мест в заказе.
     *
     */
    public function testSetOrderShipmentBoxes0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setShipmentPalletsCount_0
     *
     * Передача количества упаковок в отгрузке.
     *
     */
    public function testSetShipmentPalletsCount0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for skipGoodsFeedbacksReaction_1
     *
     * Отказ от ответа на отзывы.
     *
     */
    public function testSkipGoodsFeedbacksReaction1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for transferOrdersFromShipment_0
     *
     * Перенос заказов в следующую отгрузку.
     *
     */
    public function testTransferOrdersFromShipment0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateBusinessPrices_1
     *
     * Установка цен на товары во всех магазинах.
     *
     */
    public function testUpdateBusinessPrices1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateCampaignOffers_2
     *
     * Изменение условий продажи товаров в магазине.
     *
     */
    public function testUpdateCampaignOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateGoodsFeedbackComment_1
     *
     * Добавление нового или изменение созданного комментария.
     *
     */
    public function testUpdateGoodsFeedbackComment1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOfferContent_2
     *
     * Редактирование категорийных характеристик товара.
     *
     */
    public function testUpdateOfferContent2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOfferMappingEntries_1
     *
     * Добавление и редактирование товаров в каталоге.
     *
     */
    public function testUpdateOfferMappingEntries1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOfferMappings_2
     *
     * Добавление товаров в каталог и изменение информации о них.
     *
     */
    public function testUpdateOfferMappings2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrderItems_0
     *
     * Удаление товара из заказа или уменьшение числа единиц.
     *
     */
    public function testUpdateOrderItems0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrderStatus_0
     *
     * Изменение статуса одного заказа.
     *
     */
    public function testUpdateOrderStatus0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrderStatuses_0
     *
     * Изменение статусов нескольких заказов.
     *
     */
    public function testUpdateOrderStatuses0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePrices_1
     *
     * Установка цен на товары в конкретном магазине.
     *
     */
    public function testUpdatePrices1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePromoOffers_1
     *
     * Добавление товаров в акцию или изменение их цен.
     *
     */
    public function testUpdatePromoOffers1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateStocks_0
     *
     * Передача информации об остатках.
     *
     */
    public function testUpdateStocks0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}

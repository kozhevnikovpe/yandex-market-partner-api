<?php
/**
 * DbsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * DbsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DbsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for acceptOrderCancellation_0
     *
     * Отмена заказа покупателем.
     *
     */
    public function testAcceptOrderCancellation0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addHiddenOffers_2
     *
     * Скрытие товаров и настройки скрытия.
     *
     */
    public function testAddHiddenOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addOffersToArchive_0
     *
     * Добавление товаров в архив.
     *
     */
    public function testAddOffersToArchive0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateTariffs_2
     *
     * Калькулятор стоимости услуг.
     *
     */
    public function testCalculateTariffs2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for confirmBusinessPrices_0
     *
     * Удаление товара из карантина по цене в кабинете.
     *
     */
    public function testConfirmBusinessPrices0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for confirmCampaignPrices_0
     *
     * Удаление товара из карантина по цене в магазине.
     *
     */
    public function testConfirmCampaignPrices0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createChat_0
     *
     * Создание нового чата с покупателем.
     *
     */
    public function testCreateChat0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createOutlet_0
     *
     * Создание точки продаж.
     *
     */
    public function testCreateOutlet0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteCampaignOffers_0
     *
     * Удаление товаров из ассортимента магазина.
     *
     */
    public function testDeleteCampaignOffers0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteGoodsFeedbackComment_2
     *
     * Удаление комментария к отзыву.
     *
     */
    public function testDeleteGoodsFeedbackComment2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteHiddenOffers_2
     *
     * Возобновление показа товаров.
     *
     */
    public function testDeleteHiddenOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOffersFromArchive_0
     *
     * Удаление товаров из архива.
     *
     */
    public function testDeleteOffersFromArchive0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOffers_0
     *
     * Удаление товаров из каталога.
     *
     */
    public function testDeleteOffers0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOutletLicenses_0
     *
     * Удаление лицензий для точек продаж.
     *
     */
    public function testDeleteOutletLicenses0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteOutlet_0
     *
     * Удаление точки продаж.
     *
     */
    public function testDeleteOutlet0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deletePromoOffers_2
     *
     * Удаление товаров из акции.
     *
     */
    public function testDeletePromoOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateBoostConsolidatedReport_2
     *
     * Отчет по бусту продаж.
     *
     */
    public function testGenerateBoostConsolidatedReport2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateCompetitorsPositionReport_1
     *
     * Отчет «Конкурентная позиция».
     *
     */
    public function testGenerateCompetitorsPositionReport1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateGoodsFeedbackReport_2
     *
     * Отчет по отзывам о товарах.
     *
     */
    public function testGenerateGoodsFeedbackReport2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateMassOrderLabelsReport_1
     *
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах.
     *
     */
    public function testGenerateMassOrderLabelsReport1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateOrderLabel_1
     *
     * Готовый ярлык‑наклейка для коробки в заказе.
     *
     */
    public function testGenerateOrderLabel1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateOrderLabels_1
     *
     * Готовые ярлыки‑наклейки на все коробки в одном заказе.
     *
     */
    public function testGenerateOrderLabels1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generatePricesReport_2
     *
     * Отчет «Цены на рынке».
     *
     */
    public function testGeneratePricesReport2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateShelfsStatisticsReport_2
     *
     * Отчет по полкам.
     *
     */
    public function testGenerateShelfsStatisticsReport2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateShowsSalesReport_1
     *
     * Отчет «Аналитика продаж».
     *
     */
    public function testGenerateShowsSalesReport1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateStocksOnWarehousesReport_2
     *
     * Отчет по остаткам на складах.
     *
     */
    public function testGenerateStocksOnWarehousesReport2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateUnitedMarketplaceServicesReport_1
     *
     * Отчет по стоимости услуг.
     *
     */
    public function testGenerateUnitedMarketplaceServicesReport1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateUnitedNettingReport_1
     *
     * Отчет по платежам.
     *
     */
    public function testGenerateUnitedNettingReport1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateUnitedOrdersReport_2
     *
     * Отчет по заказам.
     *
     */
    public function testGenerateUnitedOrdersReport2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllOffers_0
     *
     * Все предложения магазина.
     *
     */
    public function testGetAllOffers0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBidsInfoForBusiness_0
     *
     * Информация об установленных ставках.
     *
     */
    public function testGetBidsInfoForBusiness0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBidsRecommendations_0
     *
     * Рекомендованные ставки для заданных товаров.
     *
     */
    public function testGetBidsRecommendations0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBusinessQuarantineOffers_0
     *
     * Список товаров, находящихся в карантине по цене в кабинете.
     *
     */
    public function testGetBusinessQuarantineOffers0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBusinessSettings_0
     *
     * Настройки кабинета.
     *
     */
    public function testGetBusinessSettings0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignLogins_0
     *
     * Логины, связанные с магазином.
     *
     */
    public function testGetCampaignLogins0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignOffers_0
     *
     * Информация о товарах, которые размещены в заданном магазине.
     *
     */
    public function testGetCampaignOffers0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignQuarantineOffers_0
     *
     * Список товаров, находящихся в карантине по цене в магазине.
     *
     */
    public function testGetCampaignQuarantineOffers0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignRegion_0
     *
     * Регион магазина.
     *
     */
    public function testGetCampaignRegion0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignSettings_0
     *
     * Настройки магазина.
     *
     */
    public function testGetCampaignSettings0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaign_0
     *
     * Информация о магазине.
     *
     */
    public function testGetCampaign0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaignsByLogin_0
     *
     * Магазины, доступные логину.
     *
     */
    public function testGetCampaignsByLogin0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCampaigns_0
     *
     * Список магазинов пользователя.
     *
     */
    public function testGetCampaigns0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoriesMaxSaleQuantum_2
     *
     * Лимит на установку кванта продажи и минимального количества товаров в заказе.
     *
     */
    public function testGetCategoriesMaxSaleQuantum2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoriesTree_2
     *
     * Дерево категорий.
     *
     */
    public function testGetCategoriesTree2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoryContentParameters_0
     *
     * Списки характеристик товаров по категориям.
     *
     */
    public function testGetCategoryContentParameters0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getChatHistory_0
     *
     * Получение истории сообщений в чате.
     *
     */
    public function testGetChatHistory0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getChats_0
     *
     * Получение доступных чатов.
     *
     */
    public function testGetChats0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeliveryServices_1
     *
     * Справочник служб доставки.
     *
     */
    public function testGetDeliveryServices1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFeedIndexLogs_0
     *
     * Отчет по индексации прайс-листа.
     *
     */
    public function testGetFeedIndexLogs0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFeed_0
     *
     * Информация о прайс-листе.
     *
     */
    public function testGetFeed0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFeedbackAndCommentUpdates_0
     *
     * Новые и обновленные отзывы о магазине.
     *
     */
    public function testGetFeedbackAndCommentUpdates0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFeeds_0
     *
     * Список прайс-листов магазина.
     *
     */
    public function testGetFeeds0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getGoodsFeedbackComments_2
     *
     * Получение комментариев к отзыву.
     *
     */
    public function testGetGoodsFeedbackComments2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getGoodsFeedbacks_2
     *
     * Получение отзывов о товарах продавца.
     *
     */
    public function testGetGoodsFeedbacks2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getGoodsStats_3
     *
     * Отчет по товарам.
     *
     */
    public function testGetGoodsStats3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getHiddenOffers_2
     *
     * Информация о скрытых вами товарах.
     *
     */
    public function testGetHiddenOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getModelOffers_0
     *
     * Список предложений для одной модели.
     *
     */
    public function testGetModelOffers0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getModel_0
     *
     * Информация об одной модели.
     *
     */
    public function testGetModel0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getModelsOffers_0
     *
     * Список предложений для нескольких моделей.
     *
     */
    public function testGetModelsOffers0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getModels_0
     *
     * Информация о нескольких моделях.
     *
     */
    public function testGetModels0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferCardsContentStatus_0
     *
     * Получение информации о заполненности карточек магазина.
     *
     */
    public function testGetOfferCardsContentStatus0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferMappingEntries_3
     *
     * Список товаров в каталоге.
     *
     */
    public function testGetOfferMappingEntries3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferMappings_0
     *
     * Информация о товарах в каталоге.
     *
     */
    public function testGetOfferMappings0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOfferRecommendations_0
     *
     * Рекомендации Маркета, касающиеся цен.
     *
     */
    public function testGetOfferRecommendations0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOffers_0
     *
     * Предложения магазина.
     *
     */
    public function testGetOffers0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrderBusinessBuyerInfo_2
     *
     * Информация о покупателе — юридическом лице.
     *
     */
    public function testGetOrderBusinessBuyerInfo2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrderBusinessDocumentsInfo_2
     *
     * Информация о документах.
     *
     */
    public function testGetOrderBusinessDocumentsInfo2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrderBuyerInfo_0
     *
     * Информация о покупателе — физическом лице.
     *
     */
    public function testGetOrderBuyerInfo0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrderLabelsData_1
     *
     * Данные для самостоятельного изготовления ярлыков.
     *
     */
    public function testGetOrderLabelsData1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrder_2
     *
     * Информация об одном заказе.
     *
     */
    public function testGetOrder2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrdersStats_2
     *
     * Детальная информация по заказам.
     *
     */
    public function testGetOrdersStats2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrders_1
     *
     * Информация о нескольких заказах.
     *
     */
    public function testGetOrders1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOutletLicenses_0
     *
     * Информация о лицензиях для точек продаж.
     *
     */
    public function testGetOutletLicenses0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOutlet_0
     *
     * Информация об одной точке продаж.
     *
     */
    public function testGetOutlet0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOutlets_0
     *
     * Информация о нескольких точках продаж.
     *
     */
    public function testGetOutlets0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPricesByOfferIds_2
     *
     * Просмотр цен на указанные товары в магазине.
     *
     */
    public function testGetPricesByOfferIds2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPrices_2
     *
     * Список цен.
     *
     */
    public function testGetPrices2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPromoOffers_2
     *
     * Получение списка товаров, которые участвуют или могут участвовать в акции.
     *
     */
    public function testGetPromoOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPromos_2
     *
     * Получение списка акций.
     *
     */
    public function testGetPromos2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getQualityRatingDetails_1
     *
     * Заказы, которые повлияли на индекс качества.
     *
     */
    public function testGetQualityRatingDetails1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getQualityRatings_2
     *
     * Индекс качества магазинов.
     *
     */
    public function testGetQualityRatings2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReportInfo_1
     *
     * Получение заданного отчета.
     *
     */
    public function testGetReportInfo1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturnApplication_1
     *
     * Получение заявления на возврат.
     *
     */
    public function testGetReturnApplication1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturnPhoto_1
     *
     * Получение фотографии возврата.
     *
     */
    public function testGetReturnPhoto1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturn_1
     *
     * Информация о невыкупе или возврате.
     *
     */
    public function testGetReturn1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getReturns_1
     *
     * Список невыкупов и возвратов.
     *
     */
    public function testGetReturns1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getStocks_2
     *
     * Информация об остатках и оборачиваемости.
     *
     */
    public function testGetStocks2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSuggestedOfferMappingEntries_3
     *
     * Рекомендованные карточки для товаров.
     *
     */
    public function testGetSuggestedOfferMappingEntries3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSuggestedOfferMappings_0
     *
     * Просмотр карточек на Маркете, которые подходят вашим товарам.
     *
     */
    public function testGetSuggestedOfferMappings0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getSuggestedPrices_3
     *
     * Цены для продвижения товаров.
     *
     */
    public function testGetSuggestedPrices3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWarehouses_1
     *
     * Список складов и групп складов.
     *
     */
    public function testGetWarehouses1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for provideOrderDigitalCodes_0
     *
     * Передача ключей цифровых товаров.
     *
     */
    public function testProvideOrderDigitalCodes0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for provideOrderItemIdentifiers_1
     *
     * Передача кодов маркировки единиц товара.
     *
     */
    public function testProvideOrderItemIdentifiers1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putBidsForBusiness_0
     *
     * Включение буста продаж и установка ставок.
     *
     */
    public function testPutBidsForBusiness0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for putBidsForCampaign_0
     *
     * Включение буста продаж и установка ставок для магазина.
     *
     */
    public function testPutBidsForCampaign0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for refreshFeed_0
     *
     * Сообщить, что прайс-лист обновился.
     *
     */
    public function testRefreshFeed0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchModels_0
     *
     * Поиск модели товара.
     *
     */
    public function testSearchModels0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRegionChildren_2
     *
     * Информация о дочерних регионах.
     *
     */
    public function testSearchRegionChildren2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRegionsById_2
     *
     * Информация о регионе.
     *
     */
    public function testSearchRegionsById2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchRegionsByName_2
     *
     * Поиск регионов по их имени.
     *
     */
    public function testSearchRegionsByName2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendFileToChat_0
     *
     * Отправка файла в чат.
     *
     */
    public function testSendFileToChat0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendMessageToChat_0
     *
     * Отправка сообщения в чат.
     *
     */
    public function testSendMessageToChat0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setFeedParams_0
     *
     * Изменение параметров прайс-листа.
     *
     */
    public function testSetFeedParams0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setOrderBoxLayout_2
     *
     * Подготовка заказа.
     *
     */
    public function testSetOrderBoxLayout2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setOrderDeliveryDate_0
     *
     * Изменение даты доставки заказа.
     *
     */
    public function testSetOrderDeliveryDate0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setOrderDeliveryTrackCode_0
     *
     * Передача трек‑номера посылки.
     *
     */
    public function testSetOrderDeliveryTrackCode0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setOrderShipmentBoxes_1
     *
     * Передача количества грузовых мест в заказе.
     *
     */
    public function testSetOrderShipmentBoxes1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setReturnDecision_0
     *
     * Принятие или изменение решения по возврату.
     *
     */
    public function testSetReturnDecision0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for skipGoodsFeedbacksReaction_2
     *
     * Отказ от ответа на отзывы.
     *
     */
    public function testSkipGoodsFeedbacksReaction2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for submitReturnDecision_0
     *
     * Подтверждение решения по возврату.
     *
     */
    public function testSubmitReturnDecision0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateBusinessPrices_2
     *
     * Установка цен на товары во всех магазинах.
     *
     */
    public function testUpdateBusinessPrices2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateCampaignOffers_0
     *
     * Изменение условий продажи товаров в магазине.
     *
     */
    public function testUpdateCampaignOffers0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateGoodsFeedbackComment_2
     *
     * Добавление нового или изменение созданного комментария.
     *
     */
    public function testUpdateGoodsFeedbackComment2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOfferContent_0
     *
     * Редактирование категорийных характеристик товара.
     *
     */
    public function testUpdateOfferContent0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOfferMappingEntries_3
     *
     * Добавление и редактирование товаров в каталоге.
     *
     */
    public function testUpdateOfferMappingEntries3()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOfferMappings_0
     *
     * Добавление товаров в каталог и изменение информации о них.
     *
     */
    public function testUpdateOfferMappings0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrderItems_1
     *
     * Удаление товара из заказа или уменьшение числа единиц.
     *
     */
    public function testUpdateOrderItems1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrderStatus_1
     *
     * Изменение статуса одного заказа.
     *
     */
    public function testUpdateOrderStatus1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrderStatuses_1
     *
     * Изменение статусов нескольких заказов.
     *
     */
    public function testUpdateOrderStatuses1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOrderStorageLimit_0
     *
     * Продление срока хранения заказа.
     *
     */
    public function testUpdateOrderStorageLimit0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOutletLicenses_0
     *
     * Создание и изменение лицензий для точек продаж.
     *
     */
    public function testUpdateOutletLicenses0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateOutlet_0
     *
     * Изменение информации о точке продаж.
     *
     */
    public function testUpdateOutlet0()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePrices_2
     *
     * Установка цен на товары в конкретном магазине.
     *
     */
    public function testUpdatePrices2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePromoOffers_2
     *
     * Добавление товаров в акцию или изменение их цен.
     *
     */
    public function testUpdatePromoOffers2()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateStocks_1
     *
     * Передача информации об остатках.
     *
     */
    public function testUpdateStocks1()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
